name: CI/CD Pipeline for React App

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set CI to false
        run: echo "CI=false" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.14.0'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build the React app
        run: npm run build

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/portfolio:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH keys for server access
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker container
        run: |
          # SSH into the server and pull the latest Docker image (your app's image)
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Stop and remove any existing containers
            docker stop portfolio || true
            docker rm portfolio || true
          
            # Pull the latest Docker image (adjust the image name)
            docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
          
            # Run the new Docker container
            docker run -d -p 80:80 -p 443:443 --name portfolio ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
          EOF

      - name: Install Certbot and obtain SSL certificates
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Install Certbot and the Nginx plugin for Certbot
            sudo apt update
            sudo apt install -y certbot python3-certbot-nginx
          
            # Obtain the SSL certificate from Let's Encrypt using the nginx plugin
            sudo certbot --nginx -d sjorsklaassen.nl -d www.sjorsklaassen.nl --non-interactive --agree-tos -m sjors.klaassen@gmail.com
          
            # Set up auto-renewal of certificates
            sudo systemctl enable certbot.timer
          EOF

      - name: Verify Deployment
        run: |
          # Check that the server is running and SSL certificates are correctly configured
          curl -I https://sjorsklaassen.nl
